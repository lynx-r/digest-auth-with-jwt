spring:
  profiles:
    active: dev
  session:
    store-type: redis

server:
  error:
    include-stacktrace: never
  port: ${PORT:8080}

# common

# JWT config
accessTokenExpirationMinutes: ${ACCESS_TOKEN_EXPIRATION_MINUTES:15}
refreshTokenExpirationHours: ${REFRESH_TOKEN_EXPIRATION_HOURS:48}
tokenIssuer: ${TOKEN_ISSUER:workingbit.com}
# length minimum 256 bites
tokenSecret: ${TOKEN_SECRET:oz85FpcY6MlIkDtiyIyNUM3fQOJbrmBiFdi6XJnPauA=}
authoritiesClaim: ${AUTHORITIES_CLAIM:auths}
# JWT config end

whiteListedAuthUrls: /api,/api/public**
jwtTokenMatchUrls: /api/protected/metrics**,/api/auth/authenticated,/api/auth/token/refresh
headers: Access-Control-Allow-Origin,Access-Control-Allow-Credentials,Origin,Content-Type,Authorization,WWW-Authenticate,X-CSRF-TOKEN,X-Auth-Token
methods: GET,POST,PATCH,PUT,DELETE,HEAD
exposedHeaders: Access-Control-Allow-Origin,Access-Control-Allow-Credentials,Origin,Authorization,WWW-Authenticate,X-CSRF-TOKEN,X-Auth-Token

loginUrl: /api/auth/token
logoutUrl: /api/logout

realmKey: ${REALM_KEY:abcd1234}
realmName: ${REALM_NAME:Welcome to an example of Digest authorization}

# prod
---
spring:
  profiles: prod

server:
  error:
    include-exception: off
    whitelabel:
      enabled: off
    include-stacktrace: never
    include-binding-errors: never
    include-message: never

originUrls: ${ORIGIN_URL:http://localhost:3000,http://localhost:4200}


# dev
---
spring:
  profiles: dev

logging:
  level:
    ru.hackatonkursk: debug
    #    web: debug
    org.springframework: debug

originUrls: http://localhost:3000,http://localhost:4200
